; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\chenj\OneDrive\Documents\Visual Studio 2013\Projects\Team_06_CS3843_Project\Team_06_CS3843_Project\EncryptData_Initial.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?encryptData@@YAHPADH@Z				; encryptData
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	?gdebug1@@3EA:BYTE				; gdebug1
EXTRN	?gdebug2@@3EA:BYTE				; gdebug2
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\chenj\onedrive\documents\visual studio 2013\projects\team_06_cs3843_project\team_06_cs3843_project\encryptdata_initial.cpp
;	COMDAT ?encryptData@@YAHPADH@Z
_TEXT	SEGMENT
_resulti$ = -8						; size = 4
_data$ = 8						; size = 4
_dataLength$ = 12					; size = 4
?encryptData@@YAHPADH@Z PROC				; encryptData, COMDAT

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 12   : 	int resulti = 0;

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _resulti$[ebp], 0

; 13   : 
; 14   : 	gdebug1 = 0;					// a couple of global variables that could be used for debugging

  00025	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?gdebug1@@3EA, 0 ; gdebug1

; 15   : 	gdebug2 = 0;					// also can have a breakpoint in C code

  0002c	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?gdebug2@@3EA, 0 ; gdebug2

; 16   : 
; 17   : 	// You can not declare any local variables in C, but should use resulti to indicate any errors
; 18   : 	// Set up the stack frame and assign variables in assembly if you need to do so
; 19   : 	// access the parameters BEFORE setting up your own stack frame
; 20   : 	// Also, you cannot use a lot of global variables - work with registers
; 21   : 
; 22   : 	__asm {
; 23   : 		// you will need to reference some of these global variables
; 24   : 		// (gptrPasswordHash or gPasswordHash), (gptrKey or gkey), gNumRounds
; 25   : 
; 26   : 		/* simple example that xors 2nd byte of data with 14th byte in the key file
; 27   : 		lea esi,gkey				// put the ADDRESS of gkey into esi
; 28   : 		mov esi,gptrKey;			// put the ADDRESS of gkey into esi (since *gptrKey = gkey)
; 29   : 
; 30   : 		lea	esi,gPasswordHash		// put ADDRESS of gPasswordHash into esi
; 31   : 		mov esi,gptrPasswordHash	// put ADDRESS of gPasswordHash into esi (since unsigned char *gptrPasswordHash = gPasswordHash)
; 32   : 
; 33   : 		mov al,byte ptr [esi]				// get first byte of password hash
; 34   : 		mov al,byte ptr [esi+4]				// get 5th byte of password hash
; 35   : 		mov ebx,2
; 36   : 		mov al,byte ptr [esi+ebx]			// get 3rd byte of password hash
; 37   : 		mov al,byte ptr [esi+ebx*2]			// get 5th byte of password hash
; 38   : 
; 39   : 		mov ax,word ptr [esi+ebx*2]			// gets 5th and 6th bytes of password hash ( gPasswordHash[4] and gPasswordHash[5] ) into ax
; 40   : 		mov eax,dword ptr [esi+ebx*2]		// gets 4 bytes, as in:  unsigned int X = *( (unsigned int*) &gPasswordHash[4] );
; 41   : 
; 42   : 		mov al,byte ptr [gkey+ebx]			// get's 3rd byte of gkey[] data
; 43   : 
; 44   : 		mov al,byte ptr [gptrKey+ebx]		// THIS IS INCORRECT - will add the address of the gptrKey global variable (NOT the value that gptrKey holds)
; 45   : 
; 46   : 		mov al,byte ptr [esi+0xd];			// access 14th byte in gkey[]: 0, 1, 2 ... d is the 14th byte
; 47   : 		mov edi,data				// Put ADDRESS of first data element into edi
; 48   : 		xor byte ptr [edi+1],al		// Exclusive-or the 2nd byte of data with the 14th element of the keyfile
; 49   : 									// NOTE: Keyfile[14] = 0x21, that value changes the case of a letter and flips the LSB
; 50   : 									// Capital "B" = 0x42 becomes lowercase "c" since 0x42 xor 0x21 = 0x63
; 51   : 		*/
; 52   : 
; 53   : 
; 54   : 		xor ecx,ecx					// reset ecx to 0

  00033	33 c9		 xor	 ecx, ecx
$startOfLoop$3:

; 55   : 	startOfLoop:
; 56   : 		mov edx,data				// moves the address of data into edx

  00035	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]

; 57   : 		add edx,ecx					// add ecx(index) to edx

  00038	03 d1		 add	 edx, ecx

; 58   : 		xor byte ptr[edx],0x1		// xor data at index ecx with a 1 (0x1)

  0003a	80 32 01	 xor	 BYTE PTR [edx], 1

; 59   : 		inc ecx						// increment ecx(index)

  0003d	41		 inc	 ecx

; 60   : 		cmp ecx,dataLength			// check if ecx is lower than dataLength

  0003e	3b 4d 0c	 cmp	 ecx, DWORD PTR _dataLength$[ebp]

; 61   : 		jb startOfLoop				// jump to startOfLoop if ecx is lower than dataLength

  00041	72 f2		 jb	 SHORT $startOfLoop$3
$done$4:

; 62   : 	done:
; 63   : 		nop

  00043	90		 npad	 1

; 64   : 	}
; 65   : 
; 66   : 	return resulti;

  00044	8b 45 f8	 mov	 eax, DWORD PTR _resulti$[ebp]

; 67   : } // encryptData

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?encryptData@@YAHPADH@Z ENDP				; encryptData
_TEXT	ENDS
END
